@use '../../global/styles/theme';
@use '../../global/styles/radius';

/**
 * @prop --background: Change sidebar background
 * @prop --color: Change sidebar text color
 *
 * @prop --background-backdrop: Change backdrop background color
 */

// Drawer
// ----------------------------------------------------------------

:host {
  --backdrop-background: #0006;
  --background: oklch(#{theme.get-color('base.200')});
  --color: oklch(#{theme.get-color('base.content')});

  position: relative;

  display: grid;

  width: 100%;
  height: 100%;
  max-width: 100vw;

  .drawer {
    &-content {
      grid-row-start: 1;

      min-width: 0px;
    }

    &-side {
      position: fixed;
      z-index: 1000;
      top: 0px;
      inset-inline-start: 0px;

      overflow-y: auto;
      overscroll-behavior: contain;

      grid-row-start: 1;

      display: grid;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-rows: repeat(1, minmax(0, 1fr));
      align-items: flex-start;

      width: 100%;
      height: 100dvh;

      pointer-events: none;

      &-inner {
        z-index: 1;
        grid-column-start: 1;
        grid-row-start: 1;

        height: 100%;

        background-color: var(--background);
        color: var(--color);

        will-change: transform;

        transition-property: transform;
        transition-timing-function: ease-out;
        transition-duration: 300ms;
      }
    }

    &-backdrop {
      position: sticky;
      top: 0px;

      grid-column-start: 1;
      grid-row-start: 1;
      place-self: stretch;

      background-color: transparent;

      cursor: pointer;

      transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
      transition-timing-function: ease-out;
      transition-duration: 200ms;
    }
  }
}

// Drawer Side
// ----------------------------------------------------------------

// using .drawer-rtl because [dir=rtl] :host() is impossible

:host([side=start]) {
  grid-auto-columns: max-content auto;

  .drawer {
    &-content {
      grid-column-start: 2;
    }
    &-side {
      inset-inline-start: 0px;

      grid-column-start: 1;
      justify-items: start;

      &-inner {
        transform: translateX(-100%);
      }
    }
  }
}
:host([side=start].drawer-rtl) {
  .drawer-side-inner {
    transform: translateX(100%);
  }
}

:host([side=end]) {
  grid-auto-columns: auto max-content;

  .drawer {
    &-content {
      grid-column-start: 1;
      overflow: hidden;
    }
    &-side {
      grid-column-start: 2;
      justify-items: end;

      overflow-x: hidden;

      &-inner {
        transform: translateX(100%);
      }
    }
  }
}
:host([side=end].drawer-rtl) {
  .drawer-side-inner {
    transform: translateX(-100%);
  }
}

// Drawer Open
// ----------------------------------------------------------------

// .drawer is needed for CSS selector specificity to avoid !important
:host(.drawer[open]) {
  .drawer {
    &-side {
      visibility: visible;
      pointer-events: auto;

      &-inner {
        transform: translateX(0%);
      }
    }

    &-backdrop {
      background-color: var(--background-backdrop);
    }
  }
}